//
// A simple server implementation showing how to:
//  * serve static messages
//  * read GET and POST parameters
//  * handle missing pages / 404s
//

#include <Arduino.h>
#include <ESP8266WiFi.h>

#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <DNSServer.h>

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#include <OneWire.h> 
#include <DallasTemperature.h>
//#define ONE_WIRE_BUS  
OneWire oneWire(D5); 
DallasTemperature sensors(&oneWire);

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The pins for I2C are defined by the Wire-library.
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL), ...
#define OLED_RESET -1       // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);



#define LOGO_HEIGHT 32
#define LOGO_WIDTH 128
    static const unsigned char PROGMEM logo_bmp[] = {
        
//         // 'tobdog', 128x32px
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x17, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x77, 0x7e, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x7f, 0xff, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x7c, 0xff, 0xf0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x78, 0xff, 0xf0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x69, 0x9f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x70, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x1f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x1c, 0xe0, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x18, 0xe0, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x18, 0xe0, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x10, 0x80, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

// 'ESP_Boot-game boy', 128x32px
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x03, 0xf0, 0x0f, 0x00, 0xf0, 0x1e, 0x0f, 0xfc, 0x00, 0xfe, 0x00, 0x1e, 0x03, 0x83, 0xc0, 
0x00, 0x1f, 0xfc, 0x1f, 0x00, 0xf8, 0x1e, 0x0f, 0xfc, 0x00, 0xff, 0x80, 0xff, 0x83, 0xc3, 0xc0, 
0x00, 0x3f, 0xfc, 0x1f, 0x80, 0xf8, 0x3f, 0x0f, 0xfc, 0x01, 0xff, 0xc1, 0xff, 0xe3, 0xc7, 0x80, 
0x00, 0x7f, 0xf8, 0x3f, 0x81, 0xf8, 0x3f, 0x0f, 0x00, 0x01, 0xe3, 0xc3, 0xff, 0xf3, 0xcf, 0x80, 
0x00, 0xfc, 0x00, 0x3f, 0x81, 0xfc, 0x7f, 0x0f, 0x00, 0x01, 0xe3, 0xc3, 0xe1, 0xf1, 0xef, 0x00, 
0x00, 0xf0, 0x00, 0x7f, 0x81, 0xfc, 0x7f, 0x0f, 0x00, 0x01, 0xe3, 0xc7, 0xc0, 0xf1, 0xfe, 0x00, 
0x01, 0xf0, 0x00, 0x7b, 0x83, 0xfc, 0xff, 0x1f, 0xf8, 0x01, 0xff, 0x87, 0x80, 0xf1, 0xfe, 0x00, 
0x01, 0xe1, 0xf8, 0xf3, 0x83, 0xdc, 0xef, 0x1f, 0xf8, 0x01, 0xff, 0x87, 0x80, 0xf0, 0xfc, 0x00, 
0x01, 0xe1, 0xf8, 0xf3, 0xc3, 0xdf, 0xef, 0x1f, 0xf0, 0x01, 0xff, 0xc7, 0x80, 0xf0, 0xf8, 0x00, 
0x01, 0xe1, 0xf9, 0xf3, 0xc7, 0x9f, 0xcf, 0x1e, 0x00, 0x03, 0xc3, 0xe7, 0x80, 0xf0, 0x78, 0x00, 
0x01, 0xf0, 0x79, 0xff, 0xc7, 0x9f, 0xcf, 0x1e, 0x00, 0x03, 0xc1, 0xe7, 0x81, 0xf0, 0xf0, 0x00, 
0x00, 0xf8, 0x73, 0xff, 0xc7, 0x8f, 0x8f, 0x1e, 0x00, 0x03, 0xc3, 0xe7, 0xe7, 0xe0, 0xf0, 0x00, 
0x00, 0xff, 0xf3, 0xc3, 0xcf, 0x0f, 0x8f, 0x1f, 0xfc, 0x03, 0xc7, 0xe3, 0xff, 0xc0, 0xf0, 0x00, 
0x00, 0x7f, 0xf7, 0x83, 0xef, 0x0f, 0x0f, 0x3f, 0xfc, 0x03, 0xff, 0xc1, 0xff, 0x80, 0xf0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x3f, 0xfc, 0x03, 0xff, 0x80, 0xff, 0x00, 0xf0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x58, 0x04, 0x00, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0x49, 0xee, 0xe5, 0x9e, 0x70, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x8d, 0x5b, 0x6d, 0xb6, 0xf6, 0xd8, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0xdb, 0x2d, 0xf4, 0xf6, 0xd8, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0xdb, 0x2d, 0xb4, 0xde, 0xd0, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

};


void display_logo()
{
    display.clearDisplay();

    display.drawBitmap(
        (display.width() - LOGO_WIDTH) / 2,
        (display.height() - LOGO_HEIGHT) / 2,
        logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
    display.display();
    delay(3000);
}


DNSServer dnsServer;
AsyncWebServer server(80);

//const char *ssid = "";
//const char *password = "";

//const char *PARAM_MESSAGE = "message";

//const uint16_t LED1_PIN = 13;
//const uint16_t LED2_PIN = 13;
float currentTemp = -99;
String currentTempStr = "-99";

const String baseHtml_begin = "<!DOCTYPE html><html lang=\"en\"><head><title>ESP LAN</title><meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"><link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\" integrity=\"sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\" crossorigin=\"anonymous\"><head><body class=\"bg-dark text-light\"><div class=\"container bg-dark text-light\"><nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"><h2 class=\"navbar-brand\">ESP LAN</h2><button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button><div id=\"navbarNavAltMarkup\" class=\"collapse navbar-collapse\"><div class=\"navbar-nav\">\
    <a class=\"nav-link\" href=\"/\">Home</a></div></div></nav>";
const String baseHtml_end = "</div><script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script><script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-Piv4xVNRyMGpqkS2by6br4gNJ7DXjqk09RmUpJ8jgGtD7zP9yug3goQfGII0yAns\" crossorigin=\"anonymous\"></script></body>";


class CaptiveRequestHandler : public AsyncWebHandler {
public:
  CaptiveRequestHandler() {}
  virtual ~CaptiveRequestHandler() {}

  bool canHandle(AsyncWebServerRequest *request){
    //request->addInterestingHeader("ANY");
    return true;
  }

  void handleRequest(AsyncWebServerRequest *request) {
    request->send(200, "text/html", baseHtml_begin + "<h4>Current Temperature: " + currentTempStr + "</h4>" + baseHtml_end);
  }
};

// void notFound(AsyncWebServerRequest *request)
// {
//     request->send(404, "text/plain", "Not found");
// }

void setup_lcd()
{

    // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
    if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS))
    {
        Serial.println(F("SSD1306 allocation failed"));
        for (;;)
            ; // Don't proceed, loop forever
    }

    // Show initial display buffer contents on the screen --
    // the library initializes this with an Adafruit splash screen.
    display.clearDisplay();
    display_logo();
    display.clearDisplay();

    display.setTextSize(1);              // Normal 1:1 pixel scale
    display.setTextColor(SSD1306_WHITE); // Draw white text
    display.setCursor(0, 0);             // Start at top-left corner
}

uint16_t lineCount = 0;
bool updateDisplay = true;
String ip;
String scr_line1;
String scr_line2;
String scr_line3;
String scr_line4;

void render()
{
    display.clearDisplay();
    display.setCursor(0, 0);

    // UI/display
    display.println(scr_line1);
    display.println(scr_line2);
    display.println(scr_line3);
    display.println(scr_line4);

    display.display();
    updateDisplay = false;
}

void write_clear()
{
    scr_line1.clear();
    scr_line2.clear();
    scr_line3.clear();
    scr_line4.clear();
    updateDisplay = true;
}

void writeln_s(String *txt)
{
    scr_line1 = scr_line2;
    scr_line2 = scr_line3;
    scr_line3 = scr_line4;
    scr_line4 = *txt;
    updateDisplay = true;
}

String write_buffer = *(new String());

void writeln(const char *txt)
{
    write_buffer.clear();
    write_buffer.concat(txt);
    writeln_s(&write_buffer);
}

void renderUi()
{
    
    scr_line1 = "SSID: Thermometer";
    scr_line2 = "IP: " + ip;
    scr_line3 = "---------------------";
    scr_line4 = "Temperature C: " + currentTempStr;
    updateDisplay = true;
}


void setup()
{
    //Serial.begin(9600);

    //pinMode(LED2_PIN, OUTPUT);

    //digitalWrite(LED2_PIN, HIGH);

    setup_lcd();

    //digitalWrite(LED2_PIN, LOW);

    // Init temp sensor
    writeln("Init sensors...");
    sensors.begin(); 

    // display.println("Init WiFi...");
    // display.display();
    //WiFi.mode(WIFI_STA);
    //WiFi.begin(ssid, password);

    // display.print("Connecting ");
    // String *x = new String(ssid);
    // display.print((*x).substring(0, 7).c_str());
    // display.println("...");
    // display.display();
    // delay(2000);

    // while (WiFi.waitForConnectResult() != WL_CONNECTED)
    // {
    //     display.clearDisplay();
    //     display.println("WiFi Failed!");
    //     display.display();

    //     //digitalWrite(LED1_PIN, HIGH);
    //     //delay(300);
    //     //digitalWrite(LED1_PIN, LOW);
    //     delay(3000);
    //     display.println("Retrying...");
    //     display.display();
    //     delay(500);
    // }
    
    //write_clear();
    // //writeln("IP Address:");
    // display.println("IP Address:");
    // display.display();
    // //ip = WiFi.localIP().toString();
    // ip = WiFi.softAPIP().toString();
    // display.println(ip);
    // display.display();
    //writeln_s(&ip);
    //writeln("Temperature C:");
    //writeln("xxx");

    // server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    //     request->send(200, "text/html", baseHtml_begin + "<h4>Current Temperature: " + *(new String(currentTemp)) + "</h4>" + baseHtml_end);
    // });

    ///

    //server.onNotFound(notFound);

    
    writeln("Init WiFi...");
    WiFi.softAP("Thermometer");
    writeln("IP Address:");
    //ip = WiFi.localIP().toString();
    ip = WiFi.softAPIP().toString();
    writeln_s(&ip);

    writeln("Init DNS...");
    dnsServer.start(53, "*", WiFi.softAPIP());
    writeln("DNS started");


    writeln("Init HTTP server...");
    server.addHandler(new CaptiveRequestHandler()).setFilter(ON_AP_FILTER);//only when requested from AP

    server.begin();
    writeln("Captive Portal Active");
    ////digitalWrite(LED1_PIN, LOW);
    //digitalWrite(LED1_PIN, HIGH);

    writeln("Startup Complete!");
    delay(2000);
}

void dns_wait_loop(u16_t wait_secs)
{
    for (u16_t i = 0; i < wait_secs; i++)
    {
        dnsServer.processNextRequest();
        delay(1000);
    }
    
}

void loop()
{
    dns_wait_loop(5);

    // Main loop here...
        
    //Serial.print("Requesting temperatures..."); 
    sensors.requestTemperatures(); // Send the command to get temperature readings 
    //Serial.println("DONE"); 
    //Serial.print(sensors.getTempCByIndex(0)); // Why "byIndex"?  
    // You can have more than one DS18B20 on the same bus.  
    // 0 refers to the first IC on the wire 
    currentTemp = sensors.getTempCByIndex(0);
    currentTempStr.clear();
    currentTempStr.concat(currentTemp);

    renderUi();
    render();

}
